/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package interfaceUsuario;

import java.util.ArrayList;
import java.util.HashSet;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import negocios.Aluno;
import negocios.Disciplina;
import negocios.Professor;
import negocios.SistemaAcademicoController;

/**
 *
 * @author lucas
 */
public class TelaDeCadastroEConsulta extends javax.swing.JFrame {
    
    // Criação da instância do objeto SistemaAcademicoController
        SistemaAcademicoController controller = new SistemaAcademicoController();

    /**
     * Creates new form InterfaceTeste
     */
    public TelaDeCadastroEConsulta() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtDataNascimento1 = new javax.swing.JTextField();
        jFrame1 = new javax.swing.JFrame();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtCPF = new javax.swing.JTextField();
        txtNome = new javax.swing.JTextField();
        txtMatricula = new javax.swing.JTextField();
        txtDataNascimento = new javax.swing.JTextField();
        txtCurso = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        btnCadastrar = new javax.swing.JButton();
        btnListarAlunos = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        TextAreaLista = new javax.swing.JTextArea();
        RadioButtomAluno = new javax.swing.JRadioButton();
        RadioButtomProfessor = new javax.swing.JRadioButton();
        RadioButtomDisciplina = new javax.swing.JRadioButton();
        jLabel7 = new javax.swing.JLabel();
        txtAreaAtuacao = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtNomeDisciplina = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtCargaHorariaDisciplina = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        btnListarProfessores = new javax.swing.JButton();
        jComboBoxProfessores = new javax.swing.JComboBox<>();
        btnListarDisciplinas = new javax.swing.JButton();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);

        jLabel1.setText("Nome:");

        jLabel2.setText("CPF:");

        jLabel3.setText("Data de Nascimento:");

        jLabel4.setText("Matrícula ou registro:");

        jLabel5.setText("Curso:");

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel6.setText("Cadastro Acadêmico");

        btnCadastrar.setText("Cadastrar");
        btnCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarActionPerformed(evt);
            }
        });

        btnListarAlunos.setText("Listar alunos");
        btnListarAlunos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarAlunosActionPerformed(evt);
            }
        });

        TextAreaLista.setEditable(false);
        TextAreaLista.setColumns(20);
        TextAreaLista.setRows(5);
        jScrollPane2.setViewportView(TextAreaLista);

        buttonGroup1.add(RadioButtomAluno);
        RadioButtomAluno.setText("Aluno");

        buttonGroup1.add(RadioButtomProfessor);
        RadioButtomProfessor.setText("Professor");

        buttonGroup1.add(RadioButtomDisciplina);
        RadioButtomDisciplina.setText("Disciplina");

        jLabel7.setText("Área de atuação:");

        jLabel8.setText("Para cadastro da disciplina:");

        jLabel9.setText("Nome:");

        jLabel10.setText("CH:");

        txtCargaHorariaDisciplina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCargaHorariaDisciplinaActionPerformed(evt);
            }
        });

        jLabel11.setText("Professor:");

        jLabel12.setText("Para cadastro de aluno ou professor:");

        btnListarProfessores.setText("Listar professores");
        btnListarProfessores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarProfessoresActionPerformed(evt);
            }
        });

        jComboBoxProfessores.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Não há professores" }));
        jComboBoxProfessores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxProfessoresActionPerformed(evt);
            }
        });

        btnListarDisciplinas.setText("Listar disciplinas por professor");
        btnListarDisciplinas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarDisciplinasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtMatricula, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel5))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtAreaAtuacao)))
                                .addGap(8, 8, 8))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtNome)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addComponent(txtCurso, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(txtCPF, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel3)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtDataNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(2, 2, 2)))
                                .addGap(6, 6, 6))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel8)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel10)
                                            .addComponent(jLabel9))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(txtCargaHorariaDisciplina, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jLabel11)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jComboBoxProfessores, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .addComponent(txtNomeDisciplina))))
                                .addGap(4, 4, 4))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(70, 70, 70)
                                .addComponent(RadioButtomAluno)
                                .addGap(18, 18, 18)
                                .addComponent(RadioButtomProfessor)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(RadioButtomDisciplina))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel12))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(179, 179, 179)
                                .addComponent(btnCadastrar)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnListarAlunos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnListarProfessores)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnListarDisciplinas))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnListarAlunos)
                            .addComponent(btnListarProfessores)
                            .addComponent(btnListarDisciplinas))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(RadioButtomAluno)
                            .addComponent(RadioButtomProfessor)
                            .addComponent(RadioButtomDisciplina))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtCPF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(txtDataNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtMatricula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCurso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(txtAreaAtuacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(txtNomeDisciplina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(txtCargaHorariaDisciplina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11)
                            .addComponent(jComboBoxProfessores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCadastrar)
                        .addGap(17, 17, 17))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void btnCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarActionPerformed
        // Obtém a entidade selecionada a partir dos botões de rádio
        String entidadeSelecionada = "";
        if (RadioButtomAluno.isSelected()) {
            entidadeSelecionada = "aluno";
        } else if (RadioButtomProfessor.isSelected()) {
            entidadeSelecionada = "professor";
        } else if (RadioButtomDisciplina.isSelected()) {
            entidadeSelecionada = "disciplina";
        }

        // Obtém os dados da entidade a partir dos campos de texto correspondentes
        String nome = txtNome.getText();
        String cpf = txtCPF.getText();
        String dataNascimento = txtDataNascimento.getText();
        int matricula = 0; // Inicializa com valor padrão
        String curso = "";
        String areaAtuacao = "";
        String nomeDisciplina = "";
        int cargaHorariaDisciplina = 0;
        Professor professorSelecionado = null;

        // Valida os campos de acordo com a entidade selecionada
        switch (entidadeSelecionada) {
            case "aluno":
                matricula = Integer.parseInt(txtMatricula.getText());
                curso = txtCurso.getText();
                if (nome.isEmpty() || cpf.isEmpty() || dataNascimento.isEmpty() || curso.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Preencha todos os campos obrigatórios!");
                    return; // Interrompe a execução do método
                }
                controller.cadastrarAluno(nome, cpf, dataNascimento, matricula, curso);
                JOptionPane.showMessageDialog(this, "Cadastrado com sucesso!");
                // Limpa os campos
                    txtNome.setText("");
                    txtCPF.setText("");
                    txtDataNascimento.setText("");
                    txtMatricula.setText("");
                    txtCurso.setText("");
                break;
            case "professor":
                matricula = Integer.parseInt(txtMatricula.getText());
                areaAtuacao = txtAreaAtuacao.getText();
                if (nome.isEmpty() || cpf.isEmpty() || dataNascimento.isEmpty() || areaAtuacao.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Preencha todos os campos obrigatórios!");
                    return; // Interrompe a execução do método
                }
                controller.cadastrarProfessor(nome, cpf, dataNascimento, matricula, areaAtuacao);
                atualizarListaProfessores();
                JOptionPane.showMessageDialog(this, "Cadastrado com sucesso!");
                // Limpa os campos
                    txtNome.setText("");
                    txtCPF.setText("");
                    txtDataNascimento.setText("");
                    txtMatricula.setText("");
                    txtAreaAtuacao.setText("");
                break;
            case "disciplina":
                nomeDisciplina = txtNomeDisciplina.getText();
                cargaHorariaDisciplina = Integer.parseInt(txtCargaHorariaDisciplina.getText());
                if (nomeDisciplina.isEmpty() || cargaHorariaDisciplina == 0) {
                    JOptionPane.showMessageDialog(this, "Preencha todos os campos obrigatórios!");
                    return; // Interrompe a execução do método
                }
                Object itemSelecionado = jComboBoxProfessores.getSelectedItem();
                if (itemSelecionado == null) {
                    JOptionPane.showMessageDialog(this, "Não há professores cadastrados!");
                    return; // Interrompe a execução do método
                }
                professorSelecionado = controller.retornaProfessorPorNome(itemSelecionado.toString());
                controller.cadastrarDisciplina(nomeDisciplina, cargaHorariaDisciplina, professorSelecionado);
                JOptionPane.showMessageDialog(this, "Cadastrado com sucesso!");
                // Limpa os campos
                    txtNomeDisciplina.setText("");
                    txtCargaHorariaDisciplina.setText("");
                break;
            default:
            JOptionPane.showMessageDialog(this, "Selecione uma entidade para cadastrar!");
            break;
        }
    }//GEN-LAST:event_btnCadastrarActionPerformed
        public void atualizarListaProfessores() {
        // Obtém a lista de professores do controlador
        ArrayList<Professor> professores = controller.retornaTodosProfessores();

        // Limpa o combobox
        jComboBoxProfessores.removeAllItems();

        // Adiciona cada professor como um item no combobox
        /* if (professores.size() == 0) {
            jComboBoxProfessores.addItem("Não há professores");
        } else {
            for (Professor professor : professores) {
                jComboBoxProfessores.addItem(professor.getNome());
            }
        } */
    }

    private void btnListarAlunosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarAlunosActionPerformed
        // Obtém todos os alunos cadastrados
        ArrayList<Aluno> alunos = controller.retornaTodosAlunos();

        // Constrói uma String com os dados de todos os alunos
        StringBuilder sb = new StringBuilder();
        for (Aluno aluno : alunos) {
            sb.append(aluno.toString());
            sb.append("\n");
        }

        // Exibe a String no TextAreaListaAlunos
        TextAreaLista.setText(sb.toString());
    }//GEN-LAST:event_btnListarAlunosActionPerformed

    private void txtCargaHorariaDisciplinaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCargaHorariaDisciplinaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCargaHorariaDisciplinaActionPerformed

    private void btnListarProfessoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarProfessoresActionPerformed
        // Obtém todos os professores cadastrados
    ArrayList<Professor> professores = controller.retornaTodosProfessores();

    // Constrói uma String com os dados de todos os professores
    StringBuilder sb = new StringBuilder();
    for (Professor professor : professores) {
        sb.append(professor.toString());
        sb.append("\n");
    }

    // Exibe a String no TextAreaListaProfessores
    TextAreaLista.setText(sb.toString());
    }//GEN-LAST:event_btnListarProfessoresActionPerformed

        private void atualizarComboBoxProfessores() {
        // Obtém a lista de professores cadastrados
        ArrayList<Professor> professores = controller.retornaTodosProfessores();

        // Cria um modelo para o ComboBox
        DefaultComboBoxModel<String> modelo = new DefaultComboBoxModel<>();

        // Adiciona os nomes dos professores ao modelo
        for (Professor professor : professores) {
            modelo.addElement(professor.getNome());
        }

        // Define o modelo do ComboBox
        jComboBoxProfessores.setModel(modelo);
    }

    private void jComboBoxProfessoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxProfessoresActionPerformed
        // Obtém a lista de professores do controlador
        ArrayList<Professor> professores = controller.retornaTodosProfessores();

        // Cria um HashSet para armazenar os nomes dos professores já adicionados
        HashSet<String> nomesAdicionados = new HashSet<>();
        // Armazena o item selecionado
        Object itemSelecionado = jComboBoxProfessores.getSelectedItem();

        // Limpa o combobox
        jComboBoxProfessores.removeAllItems();

        // Adiciona a opção "Não há professores" caso não haja professores cadastrados
        if (professores.size() == 0) {
            jComboBoxProfessores.addItem("Não há professores");
        } else {
            // Adiciona cada professor como um item no combobox, verificando se o nome já foi adicionado
            for (Professor professor : professores) {
                String nome = professor.getNome();
                if (!nomesAdicionados.contains(nome)) {
                    jComboBoxProfessores.addItem(nome);
                    nomesAdicionados.add(nome);

                    // Verifica se o item adicionado é igual ao que está selecionado atualmente
                    if (nome.equals(jComboBoxProfessores.getSelectedItem())) {
                        jComboBoxProfessores.setSelectedItem(nome);
                    }
                }
            }
        }
        // Restaura o item selecionado
        jComboBoxProfessores.setSelectedItem(itemSelecionado);
    }//GEN-LAST:event_jComboBoxProfessoresActionPerformed

    private void btnListarDisciplinasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarDisciplinasActionPerformed
        StringBuilder sb = new StringBuilder();
        ArrayList<Disciplina> disciplinas = controller.retornaTodasDisciplinas();
        if (disciplinas.size() == 0) {
            sb.append("Não há disciplinas cadastradas.");
        } else {
            for (Disciplina disciplina : disciplinas) {
                sb.append("Nome: ").append(disciplina.getNome()).append("\n");
                sb.append("Carga horária: ").append(disciplina.getCargaHoraria()).append("\n");
                sb.append("Professor: ").append(disciplina.getProfessor().getNome()).append("\n\n");
            }
        }
        TextAreaLista.setText(sb.toString());
    }//GEN-LAST:event_btnListarDisciplinasActionPerformed
    
   
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaDeCadastroEConsulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaDeCadastroEConsulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaDeCadastroEConsulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaDeCadastroEConsulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaDeCadastroEConsulta().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton RadioButtomAluno;
    private javax.swing.JRadioButton RadioButtomDisciplina;
    private javax.swing.JRadioButton RadioButtomProfessor;
    private javax.swing.JTextArea TextAreaLista;
    private javax.swing.JButton btnCadastrar;
    private javax.swing.JButton btnListarAlunos;
    private javax.swing.JButton btnListarDisciplinas;
    private javax.swing.JButton btnListarProfessores;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> jComboBoxProfessores;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField txtAreaAtuacao;
    private javax.swing.JTextField txtCPF;
    private javax.swing.JTextField txtCargaHorariaDisciplina;
    private javax.swing.JTextField txtCurso;
    private javax.swing.JTextField txtDataNascimento;
    private javax.swing.JTextField txtDataNascimento1;
    private javax.swing.JTextField txtMatricula;
    private javax.swing.JTextField txtNome;
    private javax.swing.JTextField txtNomeDisciplina;
    // End of variables declaration//GEN-END:variables
}
